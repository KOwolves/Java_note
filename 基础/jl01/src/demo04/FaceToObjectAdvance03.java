package demo04;

/**
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 内部类：在一个类的里面所定义的另一个类
 * 访问特点：内部类可以直接访问外部类的成员，包括私有
 *          外部类访问内部类的成员，必须创建对象
 * 分类（前三个不常用，最后一个很常用）：
 *      1、成员内部类
 *      2、静态内部类
 *      3、局部内部类
 *      4、匿名内部类
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 成员内部类：
 *      写在成员位置，属于外部类的成员
 *      可以被一些修饰符所修饰，如private、protected、public、static等
 *      获取成员内部类对象：
 *          1、外部类中编写方法，对外提供内部类的对象（private）
 *          2、直接创建 => 外部类名.内部类名 对象名 = 外部类对象.内部类对象;（非私有）
 *      内部类对象中存在一个Outer.this指向外部类
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 静态内部类：
 *      成员内部类的特殊情况，只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建对象
 *      对象创建方法：外部类名.内部类名 对象名 = new 外部类名.内部类名();
 *      调用非静态方法的调用格式：先创建对象，再用对象调用
 *      调用静态方法的调用格式：外部类名.内部类名.方法名();
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 局部内部类：
 *      将内部类定义在方法里面，类似于方法中的局部变量
 *      外界无法直接使用，需要再方法内创建对象并使用
 *      可以直接访问外部类的成员，也可用访问方法内的局部变量
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 匿名内部类:
 *      本质上就是隐藏了名字的内部类
 *      格式（！实际上是一个对象！）：
 *          new 类名或接口名() {
 *              重写方法
 *          };
 *      既可以写在成员位置，也可以写在局部位置
 *      使用场景：当方法的参数是接口或类时，可以传递这个接口的实现类对象/类的子类对象
 *               如果只需使用一次，就可以使用匿名内部类简化代码
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 */

public class FaceToObjectAdvance03 {
    public static void main(String[] args) {
        //创建内部类对象方法1
        Outer.Inner01 oi1 = new Outer().new Inner01();
        //创建内部类对象方法2
        Outer o1 = new Outer("小O");
        System.out.println(o1.getInner());

        //静态内部类
        Outer.Inner02 oi2 = new Outer.Inner02();
        oi2.show1();
        Outer.Inner02.show2();

        //局部内部类
        o1.Inner03();

        //匿名内部类
        //接口
        o1.Inner04();
        //类
        o1.Inner05(
                //本质是一个Lab的子类的对象，是一种多态的实现
                new Lab() {
                    @Override
                    public void lab() {
                        System.out.println("匿名内部类中重写Lab的方法");
                    }
                }
        );
    }
}
