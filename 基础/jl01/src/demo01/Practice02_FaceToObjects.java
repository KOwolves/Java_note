package demo01;

/**
 * 类和对象
 * ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 用来描述一类事物的类：Javabean类（属性 + 行为） —— 不写main方法
 * 编写main方法的类：   测试类
 * ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 封装：对象代表什么，就封装对应的数据，并提供数据对应的行为
 * private关键字：被private修饰的成员只有在本类中才能访问
 * 成员赋值与获取操作通过set方法（赋值）和get方法（获取）实现
 * ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * this关键字：指定当前对象，类似指针，用"."调用属性，便于赋值，区分局部变量和成员变量
 * ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 构造方法：类似构造函数，创建对象时调用
 * ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 标准Javabean类：
 *      1、类名见名知义，驼峰命名
 *      2、成员变量（属性）用private修饰
 *      3、至少两个构造方法：无参构造方法 + 带全部参数的构造方法
 *      4、成员方法：提供每个成员变量的getXxx() and setXxx()
 *  快捷键：Ctrl + insert （+Fn）
 *  插件：PTG
 *  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 *  Java内存分配：堆（会产生地址值）、栈（方法进行时进入的内存）、方法区（字节码文件加载时进入的内存）、本地方法栈、寄存器
 *  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————
 *
 */

public class Practice02_FaceToObjects {
    public static void main(String[] args) {
        battleGame();//文字版回合制格斗游戏
    }


    //文字版回合制格斗游戏
    public static void battleGame() {
        //1.创建第一个角色
        Roles r1 = new Roles("乔峰",100,'男');
        //2.创建第二个角色
        Roles r2 = new Roles("鸠摩智",100,'男');

        //展示一下角色的信息
        r1.showRoleInfo();
        r2.showRoleInfo();

        //3.开始格斗 回合制游戏
        while(true){
            //r1开始攻击r2
            r1.attack(r2);
            //判断r2的剩余血量
            if(r2.getBlood() == 0){
                System.out.println(r1.getName() + " K.O了" + r2.getName());
                break;
            }

            //r2开始攻击r1
            r2.attack(r1);
            if(r1.getBlood() == 0){
                System.out.println(r2.getName() + " K.O了" + r1.getName());
                break;
            }
        }
    }





















}
