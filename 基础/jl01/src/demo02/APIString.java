package demo02;

/**
 * API和API帮助文档：
 * API：别人已经写好的东西
 * API帮助文档：API合集
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 字符串：
 * 特点：Java.lang.String类代表字符串（不需要导包），字符串内容不能发生改变，对象在创建后不能更改
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 创建方式：
 *      1、直接赋值（使用最多）
 *      2、new构造方法：
 *          （1）空参构造
 *          （2）传递字符串
 *          （3）传递字符数组
 *          （4）传递字节数组：ASCII码（网络传输中应用）
 * 内存原理：
 *      1、直接赋值：检查字符串在串池中是否存在，不存在则创建新的，存在则复用地址（string变量存储地址）
 *      2、new构造：不会复用，浪费内存
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * String方法——比较：
 *      1、equals(String s)：完全相同才返回true，否则返回false
 *      2、equalsIgnoreCase(String s)：忽略大小写
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * String方法——遍历：
 *      1、charAT(int index)：根据索引返回字符
 *      2、length()：返回字符串长度
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * String方法——截取：
 *      1、substring(int begin, int end)：左开右闭，返回子串
 *      2、substring(int begin)：默认截取到最后
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * String方法——替换：
 *      1、replace(String oldStr, String newStr)：返回新串
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * String方法——转换字符数组：toCharArray(String str)：返回字符数组
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder：可以看做一个容器，创建之后里面的内容可以改变，用于提高字符串的操作效率
 * 构造方法：
 *      1、空参构造
 *      2、有参构造
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder方法——添加：
 *      append(任意类型)：添加数据并返回对象本身
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder方法——反转：
 *      reverse()：反转容器内容
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder方法——长度：
 *      length()：返回长度，即字符个数
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder方法——将StringBuilder转换成String：
 *      toString()：转换成String
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringBuilder常用场景：
 *      1、拼接
 *      2、反转
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringJoiner：提高字符串编写（拼接）效率，JDK8才出现，用的少
 * 构造方法：
 *      1、有参构造：参数为间隔符号
 *      2、有参构造：参数为间隔符号，开始符号，结束符号
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringJoiner方法——添加：
 *      add(添加的内容)：返回对象本身
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringJoiner方法——长度：
 *      length()：返回长度
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * StringJoiner方法——toString()：返回字符串
 * ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
 * 字符串拼接内存原理：
 *      1、“+”：一个加号，堆内存中创建两个对象，本质是多次创建StringBuilder对象多次调用StringBuilder.append，效率低
 *      2、JDK8优化：预估长度，创建数组，把内容放入数组，无变量时放入串池（会复用），
 *        但是如果有变量参与，都会新new出一个字符串，存在于堆区
 *      3、StringBuilder：一个StringBuilder对象（内容可变容器），不需要多次创建对象造成浪费
 *        扩展原理：默认容量16，扩容时，以容量*2+2的大小扩容，如果超出该值，则以实际长度为准
 */


public class APIString {
    public static void main(String[] args) {
        //new构造方法：
        /*
        //  （1）空参构造
        String s1 = new String();
        System.out.println("s1: " + 'a' + s1 + 'c');
        //  （2）传递字符串
        String s2 = new String("hhhhhh");
        System.out.println("s2: " + s2);
        //  （3）传递字符数组
        char[] chs = {'a', 'b', 'c'};
        String s3 = new String(chs);
        System.out.println("s3: " + s3);
        //  （4）传递字节数组：ASCII码
        byte[] bs = {97,98,99};
        String s4 = new String(bs);
        System.out.println("s4: " + s4);
        */

        //比较测试
        /*String s5 = "Abc";
        System.out.println(s3.equals(s5));
        System.out.println(s3.equalsIgnoreCase(s5));
        */

        //遍历测试
        /*
        for (int i = 0; i < s3.length(); i++) {
            char c = s3.charAt(i);
            System.out.println(c);
        }
        */

        //StringBuilder测试
        /*
        StringBuilder sb = new StringBuilder("abc");
        //添加元素
        sb.append(1);
        sb.append(2.1);
        sb.append(true);
        //反转
        sb.reverse();
        //长度
        System.out.println(sb.length());
        //转字符串
        System.out.println(sb.toString());

        //直接输出内容
        System.out.println(sb);
        */

        //StringJoiner测试
        /*
        StringJoiner sj = new StringJoiner(",", "[", "]");
        sj.add("1").add("2").add("3");
        System.out.println(sj.toString());
        */







    }
}
